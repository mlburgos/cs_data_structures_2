Discussion Questions

Recursion

- In your own words, what is recursion?
Recursion is continually unraveling a problem until you get down to a simple enough case that you can solve. Once you have that answer, you can piece the rest of the problem back together with that answer as the base. 

A method of solving a problem by solving a smaller instance of the same problem, until it gets small enough to solve directly. 


- Why is it necessary to have a base case?
The base case is necessary because sets the limit on the recursion. Without the base case, it would continue on.



Graphs

- What is a graph?
A graph is a data structure made up of nodes and edges, where the edges represent relationship between the nodes.

- How is a graph different from a tree?
Graphs are like trees except that they can be cyclic, and they do not have to reflect a hierarchy amongst the nodes. Trees are acyclic, directed graphs.

- Give an example of something that would be good to model with a graph.
An actor network where the edges represent that they've performed together.


Performance of Different Data Structures

Fill in the missing spots in the chart with the correct runtimes. Do this by reasoning through how the data structures work, NOT by looking up the solution. Add-R means add to the right/end/top and Add-L means add to the left/beginning/bottom. There are X’s in the spots where that operation doesn’t make sense for that data structure (for instance, you can’t index a stack, or pop from the end of a queue). We’ve provided the first few answers for you.


Fill in the runtimes for the following actions for the table below:

Data Structure        Index   Search  Add-R   Add-L   Pop-L   Pop-R

Python List (Array)    O(1)    O(n)    O(1)    O(n)    O(n)    O(1) 
Linked List            O(n)    O(n)    O(1)    O(1)    O(1)    O(1)
Doubly-Linked List     O(n)    O(n)    O(1)    O(1)    O(1)    O(1)                
Queue (as Array)        X       X      O(1)     X      O(n)     X
Queue (as LL or DLL)    X       X      O(1)     X      O(1)     X
Stack                   X       X      O(1)     X       X      O(1)
Deque (as DLL)          X       X      O(1)    O(1)    O(1)    O(1)

Index: Find an item in the structure when you know its position
Search: Find an item in the structure when you know its data
Add(R/L): Set a key in set/dictionary or add node to tree
Pop(R/L): Remove a key or node


Fill in Runtime and Memory:

The answers for dictionary have been provided; you should fill in the rest:

Data Structure          Get     Add     Delete  Iterate Memory
Dictionary (Hash Map)   O(1)    O(1)    O(1)    O(n)    medium
Set (Hash Map)          O(1)    O(1)    O(1)    O(n)    medium         
Binary Search Tree      O(logn) O(logn) O(logn) O(n)    little  
Trees                   O(n)    O(1)    O(1)    O(n)    little

Get: Find an item in the structure
Add: Set a key in set/dictionary or add node to tree
Delete: Remove a key or node
Iterate: Find next item in data structure
Memory: Relative to data, how much memory is used? (Choices: a little, medium, or a lot)


Sorting

- Describe in words how the Bubble Sort algorithm works.
This algorithm steps through a list of numbers and compares the two numbers that are next to each other, swapping the larger to the higher index. Each pass through the list puts the next largest number into its correct index position. 

- Describe in words how the Merge Sort algorithm works.
The Merge Sort algorithm recursively splits an unsorted list of numbers in half until we're left with several lists of individual numbers. Then it puts the lists back together (or "merges" them) in the same order that they were split apart, but it sorts them as it recombines them by comparing the first item in each list and appending the lower of the two to a new list, repeating this process until both lists are empty. 

- Describe in words how the Quick Sort algorithm works.
This is done by selecting a pivot from our list of numbers and then bucketing all other numbers into either a lower_than_pivot bucket or a greater_than_pivot bucket. We do the same thing on these buckets until they are down to length 1 at which point everything will be in order, and it returns the sum (concatenation?) of all of these lists.


